---
- name: Part to run as root
  hosts: localhost
  connection: ssh
  remote_user: root

  vars_files:
  - structure.yml

  tasks:

  - name: Describe zone file
    ansible.builtin.blockinfile:
      path: /etc/bind/named.conf.local
      insertafter:
      block: |
        zone "{{ domain }}." {
          type master;
          file "/etc/bind/zones/db.{{ domain }}";
          allow-update { 127.0.0.1; };
        };
    notify: restart BIND

  - name: Create empty zone file
    copy:
      dest: /etc/bind/zones/db.{{ domain }}
      force: no
      content: |
        $ORIGIN {{ domain }}.
        $TTL 3600    ; 1 hour
        {{ domain }}. IN SOA  ns1.{{ domain }}. root.{{ domain }}. (
          1          ; serial
          3600       ; refresh (1 hour)
          1800       ; retry (30 minutes)
          604800     ; expire (1 week)
          43200      ; minimum (12 hours)
          )
        @            IN NS ns1.{{ domain }}.
        $TTL 3600    ; 1 hour
        ns1          IN A {{ ansible_eth0.ipv4.address }}
    notify: restart BIND

  handlers:

  - name: restart BIND
    ansible.builtin.service:
      name: named
      state: restarted

- name: Part to run as host
  hosts: localhost
  connection: local

  vars_files:
  - structure.yml
  - vars.yml

  vars:
    project_dir: .
    files_dir: "{{ project_dir }}/tf-files"

  tasks:

  - name: Create directory for tf
    file:
      path: "{{ files_dir }}"
      state: directory
      owner: host
      group: host
      mode: u=rwx,g=x,o=x

  - name: Create directory for droplets module
    file:
      path: "{{ files_dir }}/members"
      state: directory
      owner: host
      group: host
      mode: u=rwx,g=x,o=x

  - name: Create main file
    copy:
      dest: "{{ files_dir }}/main.tf"
      content: |
        terraform {
          required_providers {
            digitalocean = {
              source = "digitalocean/digitalocean"
            }
          }
        }

        variable "do_token" {}

        provider "digitalocean" {
          token = var.do_token
        }

        module "members" {
          source = "./members"
          do_token = var.do_token
        }

        # Get list of all droplets
        data "digitalocean_droplets" "all" {
          depends_on = [module.members]
        }

        # Create Ansible inventory
        resource "local_file" "ansible_inventory" {
          content = templatefile("../templates/hosts.tmpl",
            {
              ss_list = [for ix in data.digitalocean_droplets.all.droplets : ix.name if contains(ix.tags, "ss")],
              cs_list = [for ix in data.digitalocean_droplets.all.droplets : ix.name if contains(ix.tags, "cs")],
              ca_list = [for ix in data.digitalocean_droplets.all.droplets : ix.name if contains(ix.tags, "ca")],
              misp_list = [for ix in data.digitalocean_droplets.all.droplets : ix.name if contains(ix.tags, "misp")],
            }
          )
          filename = "../hosts"
          file_permission = "0664"
        }

  - name: Create main file for members
    copy:
      dest: "{{ files_dir }}/members/main.tf"
      content: |
        terraform {
          required_providers {
            digitalocean = {
              source = "digitalocean/digitalocean"
            }
            dns = {
              source = "hashicorp/dns"
            }
          }
        }

        variable "do_token" {}

        provider "digitalocean" {
          token = var.do_token
        }

        provider "dns" {
          update {
            server = "127.0.0.1"
          }
        }

        resource "digitalocean_ssh_key" "default" {
          name       = "host@master"
          public_key = file(pathexpand("~/.ssh/id_rsa.pub"))
        }

        resource "digitalocean_project" "project" {
          name        = "{{ sandbox }}"
          description = "A project to try GovStack sandbox."
          purpose     = "GovStack sandbox"
          environment = "Development"
        }

  - name: Generate Members VPC and Security Server
    with_items: "{{ members }}"
    copy:
      dest: "{{ files_dir }}/members/{{ item.class }}-{{ item.code }}.tf"
      content: |
        # create member vpc
        resource "digitalocean_vpc" "{{ item.class }}-{{ item.code }}-vpc" {
          name     = "{{ item.name }}"
          region   = "{{ region }}"
        }

        # create member ss
        resource "digitalocean_droplet" "{{ item.class }}-{{ item.code }}-ss" {
          image  = "{{ droplet_image.ss }}"
          name   = "{{ item.class }}-{{ item.code }}-ss.{{ domain }}"
          tags   = ["ss"]
          region = "{{ region }}"
          size   = "{{ droplet_size.ss }}"
          vpc_uuid = digitalocean_vpc.{{ item.class }}-{{ item.code }}-vpc.id
          ssh_keys = [digitalocean_ssh_key.default.fingerprint]
        }

        # Add an A record of public address to the domain
        resource "dns_a_record_set" "{{ item.class }}-{{ item.code }}-ss" {
          zone = "{{ domain }}."
          name = "{{ item.class }}-{{ item.code }}-ss"
          addresses = [ digitalocean_droplet.{{ item.class }}-{{ item.code }}-ss.ipv4_address ]
          ttl = 300
        }

        # Add an A record of private address to the domain
        resource "dns_a_record_set" "{{ item.class }}-{{ item.code }}-ss-in" {
          zone = "{{ domain }}."
          name = "{{ item.class }}-{{ item.code }}-ss.in"
          addresses = [ digitalocean_droplet.{{ item.class }}-{{ item.code }}-ss.ipv4_address_private ]
          ttl = 300
        }

        # Assign ss to project
        resource "digitalocean_project_resources" "{{ item.class }}-{{ item.code }}-pr" {
          project = digitalocean_project.project.id
          resources = [
            digitalocean_droplet.{{ item.class }}-{{ item.code }}-ss.urn,
          ]
        }

  - name: Generate Centre
    copy:
      dest: "{{ files_dir }}/members/centre.tf"
      content: |
        # create Centre vpc
        resource "digitalocean_vpc" "cs-vpc" {
          name     = "Centre"
          region   = "{{ region }}"
        }

        # create Centre ss
        resource "digitalocean_droplet" "ss" {
          image  = "{{ droplet_image.ss }}"
          name   = "ss.{{ domain }}"
          tags   = ["ss"]
          region = "{{ region }}"
          size   = "{{ droplet_size.ss }}"
          vpc_uuid = digitalocean_vpc.cs-vpc.id
          ssh_keys = [digitalocean_ssh_key.default.fingerprint]
        }

        # Add an A record of public address of ss to the domain
        resource "dns_a_record_set" "ss" {
          zone = "{{ domain }}."
          name = "ss"
          addresses = [ digitalocean_droplet.ss.ipv4_address ]
          ttl = 300
        }

        # Add an A record of private address of ss to the domain
        resource "dns_a_record_set" "ss-in" {
          zone = "{{ domain }}."
          name = "ss.in"
          addresses = [ digitalocean_droplet.ss.ipv4_address_private ]
          ttl = 300
        }

        # create cs
        resource "digitalocean_droplet" "cs" {
          image  = "{{ droplet_image.cs }}"
          name   = "cs.{{ domain }}"
          tags   = ["cs"]
          region = "{{ region }}"
          size   = "{{ droplet_size.cs }}"
          vpc_uuid = digitalocean_vpc.cs-vpc.id
          ssh_keys = [digitalocean_ssh_key.default.fingerprint]
        }

        # Add an A record of public address of cs to the domain
        resource "dns_a_record_set" "cs" {
          zone = "{{ domain }}."
          name = "cs"
          addresses = [ digitalocean_droplet.cs.ipv4_address ]
          ttl = 300
        }

        # Add an A record of private address of cs to the domain
        resource "dns_a_record_set" "cs-in" {
          zone = "{{ domain }}."
          name = "cs.in"
          addresses = [ digitalocean_droplet.cs.ipv4_address_private ]
          ttl = 300
        }

        # create ca
        resource "digitalocean_droplet" "ca" {
          image  = "{{ droplet_image.ca }}"
          name   = "ca.{{ domain }}"
          tags   = ["ca"]
          region = "{{ region }}"
          size   = "{{ droplet_size.ca }}"
          vpc_uuid = digitalocean_vpc.cs-vpc.id
          ssh_keys = [digitalocean_ssh_key.default.fingerprint]
        }

        # Add an A record of public address of cs to the domain
        resource "dns_a_record_set" "ca" {
          zone = "{{ domain }}."
          name = "ca"
          addresses = [ digitalocean_droplet.ca.ipv4_address ]
          ttl = 300
        }

        # Add an A record of private address of cs to the domain
        resource "dns_a_record_set" "ca-in" {
          zone = "{{ domain }}."
          name = "ca.in"
          addresses = [ digitalocean_droplet.cs.ipv4_address_private ]
          ttl = 300
        }

        # Assign resources to project
        resource "digitalocean_project_resources" "cs-pr" {
          project = digitalocean_project.project.id
          resources = [
            digitalocean_droplet.ss.urn,
            digitalocean_droplet.cs.urn,
            digitalocean_droplet.ca.urn,
          ]
        }

